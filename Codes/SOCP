%python
import math
from cvxopt import matrix, solvers

c = matrix([0.,0.,1.,1.,1.])
G = [ matrix( [[0.,-1.,0.], [0.,0.,-1.], [-1.,0.,0.], [0.,0.,0.], [0.,0.,0.]] ) ]
G += [ matrix( [[0.,-1.,0.], [0.,0.,-1.], [0.,0.,0.], [-1.,0.,0.], [0.,0.,0.]] ) ]
G += [ matrix( [[0.,-1.,0.], [0.,0.,-1.], [0.,0.,0.],  [0.,0.,0.], [-1.,0.,0.],] ) ]
h = [ matrix( [0.,0.,0.] ),  matrix( [0.,-1.,0.] ), matrix( [0.,-0.5,-math.sqrt(3.)/2] ) ]
solvers.socp(c, Gq = G, hq = h)

%python

from cvxopt import matrix, solvers
import math

def SOCPSolve(a,eta):
    m = len(eta)
    d = len(a[0])
    for i in range(1,d+1):
        eta.insert(0,0.)
    eta = matrix(eta)
    l = [0.]*(d-1)
    l.insert(0,-1.)
    l.insert(0,0.)
    L = [l]
    for i in range(1,d):
        l = [0.]*(d-1)
        l.insert(0,-1.)
        l.insert(0,0.)
        l[i],l[i+1] = l[i+1],l[i]
        L.append(l)
    p = [0.]*(d)
    p.insert(0,-1.)
    L.append(p)
    for i in range(1,m):
        L.append([0.]*(d+1))
    G = [matrix(L)]
    for i in range(d,d+m-1):
        L[i],L[i+1] = L[i+1],L[i]
        G += [matrix(L)]
    a[0].insert(0,0.)
    h = [matrix([j*(-1) for j in a[0]])]
    for i in range(1,m):
        a[i].insert(0,0.)
        h += [matrix([j*(-1) for j in a[i]])]
    sol = solvers.socp(eta, Gq = G, hq = h)
    return sol

SOCPSolve([[0.,0.],[1.,0.],[0.5,math.sqrt(3.)/2]],[1.,1.,1.])
